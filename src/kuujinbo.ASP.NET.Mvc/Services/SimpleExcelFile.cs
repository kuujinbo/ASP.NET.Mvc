using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
/* ============================================================================
 * __VERY__ simple Excel file dump using Open XML SDK
 * ============================================================================
 */
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;

namespace kuujinbo.ASP.NET.Mvc.Services
{
    public interface ISimpleExcelFile
    {
        /// <summary>create excel file from a generic ADO.NET call</summary>
        /// <param name="dataTable">System.Data.DataTable</param>
        /// <returns>byte array Excel file generated by Open XML SDK</returns>
        byte[] Create(DataTable dataTable);

        /// <summary>create excel file from JqueryDataTables call</summary>
        /// <param name="data">collection of objects</param>
        /// <returns>byte array Excel file generated by Open XML SDK</returns>
        /// <remarks>include the JqueryDataTables header columns</remarks>
        byte[] Create(List<List<object>> data);
    }

    public class SimpleExcelFile : ISimpleExcelFile
    {
        /* --------------------------------------------------------------------
         * for WriteCellsAndRow()
         * --------------------------------------------------------------------
         */
        private OpenXmlWriter _writer;
        private int _columnCount;

        /* --------------------------------------------------------------------
         * OpenXmlWriter writes **XML**; no need to instantiate new objects 
         * for each cell/row
         * --------------------------------------------------------------------
         */
        public static readonly Cell CELL_INLINE_STRING = new Cell()
        {
            DataType = CellValues.InlineString
        };
        public static Row ROW = new Row();

        public byte[] Create(List<List<object>> data)
        {
            _columnCount = data[0].Count();
            return WriteFile(data);
        }

        public byte[] Create(DataTable dataTable)
        {
            _columnCount = dataTable.Columns.Count;
            return WriteFile(dataTable);
        }

        private byte[] WriteFile(object data)
        {
            using (var memoryStream = new MemoryStream())
            {
                using (var spreadsheetDocument = SpreadsheetDocument.Create(
                    memoryStream,
                    SpreadsheetDocumentType.Workbook))
                {
                    var workbookPart = spreadsheetDocument.AddWorkbookPart();
                    workbookPart.Workbook = new Workbook();

                    var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                    var sheets = workbookPart.Workbook.AppendChild<Sheets>(new Sheets());
                    sheets.Append(new Sheet()
                    {
                        Id = workbookPart.GetIdOfPart(worksheetPart),
                        SheetId = 1,
                        Name = "sheet1"
                    });

                    using (_writer = OpenXmlWriter.Create(worksheetPart))
                    {
                        _writer.WriteStartElement(new Worksheet());
                        _writer.WriteStartElement(new SheetData());

                        // ugly but simple; code in this method not repeated
                        if (data is DataTable)
                        {
                            WriteDataTable((DataTable)data);
                        }
                        else
                        {
                            WriteList((List<List<object>>)data);
                        }

                        _writer.WriteEndElement();
                        _writer.WriteEndElement();
                    }
                }
                return memoryStream.ToArray();
            }
        }

        private void WriteList(List<List<object>> data)
        {
            // header **AND** data
            foreach (var r in data) WriteCellsAndRow(r.ToArray());
        }

        private void WriteDataTable(DataTable dataTable)
        {
            // header
            WriteCellsAndRow(dataTable
                .Columns.Cast<DataColumn>()
                .Select(x => x.ColumnName)
                .ToArray()
            );
            // data
            foreach (DataRow r in dataTable.Rows) WriteCellsAndRow(r.ItemArray);
        }

        // TODO (possible): type check for WriteElement() 
        private void WriteCellsAndRow(object[] row)
        {
            _writer.WriteStartElement(ROW);
            for (int i = 0; i < _columnCount; i++)
            {
                var val = row[i] != null ? row[i].ToString() : string.Empty;
                _writer.WriteStartElement(CELL_INLINE_STRING);
                _writer.WriteElement(new InlineString(new Text(val)));
                _writer.WriteEndElement();
            }
            _writer.WriteEndElement();
        }
    }
}