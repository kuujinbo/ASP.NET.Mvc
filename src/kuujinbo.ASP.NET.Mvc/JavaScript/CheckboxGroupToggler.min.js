function CheckboxGroupToggler(a) { Object.defineProperty(this, "initError", { value: "CSS selector for the checkbox group parent DOM element required." }); Object.defineProperty(this, "containerError", { value: "checkbox group parent DOM element not found. verify CSS selector is correct" }); Object.defineProperty(this, "buttonUncheckClassList", { value: "btn btn-sm btn-default" }); Object.defineProperty(this, "buttonCheckClassList", { value: "btn btn-sm btn-primary checked" }); if (!a || !a.match(/\w+/)) throw this.initError; this._checkGroupSelector = a } CheckboxGroupToggler.prototype = { constructor: CheckboxGroupToggler, getCheckAllHtml: function () { return "<span class='glyphicon glyphicon-check'></span> Check All" }, getUncheckAllHtml: function () { return "<span class='glyphicon glyphicon-unchecked'></span> Uncheck All" }, getCheckGroup: function () { var a = document.querySelector(this._checkGroupSelector); if (!a) throw this.containerError; return a }, addToggleElement: function (a) { var b = document.createElement("span"); b.innerHTML = "<button type='button' class='" + this.buttonCheckClassList + "' style='margin:8px 0;text-align:left;width:100px'>" + this.getCheckAllHtml() + "</button>"; var c = this.getCheckGroup(); c.parentNode.insertBefore(b, a ? c.nextSibling : c); b.addEventListener("click", this.clickToggleElement.bind(this), !1) }, clickToggleElement: function (a) { var b = this.getCheckGroup(); a = a.target; if (a.className === this.buttonCheckClassList) { b = b.querySelectorAll('input[type="checkbox"]:not(:checked)'); for (i = 0; i < b.length; ++i) b[i].checked = !0; a.className = this.buttonUncheckClassList; a.innerHTML = this.getUncheckAllHtml() } else { b = b.querySelectorAll('input[type="checkbox"]:checked'); for (i = 0; i < b.length; ++i) b[i].checked = !1; a.className = this.buttonCheckClassList; a.innerHTML = this.getCheckAllHtml() } } };